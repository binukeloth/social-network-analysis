{
    "contents" : "#RScript to load data file and generate iGraph\nlibrary(igraph)\nlibrary(data.table)\n\nstringsAsFactors=FALSE\n\n# Read in raw data\n# PreContition - csv file with node connections\n#   field 1 - originating node; mandatory\n#   field 2 - Terminating node; mandatory\n#   date of event: Optional\n#   other optional columns for subsetting\n\nloadData = function(dataFile, header, sep) {\n  data.table(read.csv(file=dataFile, header=header, sep=sep));\n}\n\ncomputeNWProp = function (dataTable, subsetCond) {\n  setkey(dataTable, \"from\", \"to\");  \n  \n  \n  if(is.null(subsetCond))\n  {\n    nw.data.sum = dataTable[ ,list(\"edgeWeight\"=.N), by=\"from,to\"];\n  }\n  else\n  {\n    nw.data.sum = dataTable[eval(subsetCond), \n                            list(\"edgeWeight\"=.N), by=\"from,to\"];\n  }\n  \n  nw.graph = graph.data.frame(nw.data.sum);\n  #set.edge.attribute(nw.graph, \"EdgeWeight\", index=E(nw.graph), nw.data.sum[3,])\n  \n  nw.nodeProps = data.table(node = V(nw.graph)$name, degree = degree(nw.graph), \n                         betweeness = betweenness(nw.graph, directed=TRUE),\n                         closeness = closeness(nw.graph));\n  \n  \n  nw.edgeProps = data.table(edge=E(nw.graph, ));\n  \n  nw.props = list(\"degDist\" = degree.distribution(nw.graph), \n                  \"density\" = graph.density(nw.graph, loops=TRUE));\n    \n  \n  \n  # tables();\n  \n  nw = list(\"graph\"= nw.graph,\n               \"props\" = nw.props,\n               \"nodeProps\"= nw.nodeProps,\n               \"edgeProps\" = nw.edgeProps);\n  \n  #print.summary.nw(nw);\n\n  return(nw);\n}\n\nwriteGraph = function(graph, outFile) {\n  \n  write.graph(graph, outFile, format = \"gml\");\n}\n\ngetOutputFile = function(dataFile) {\n  tmp.outputFile = strsplit(dataFile, \"\\\\.\")[[1]][1];\n  tmp.outputFile = paste0(tmp.outputFile, \".gml\");\n  \n  return(tmp.outputFile);\n}\n\nplotGraph = function(graph) {\n  #plot it\n  opar <- par()$mar;\n  par(mar=rep(0, 4)) #Give the graph lots of room\n  \n  plot.igraph(graph, layout=layout.auto(graph))\n  par(mar=opar)\n}\n\nprintNWSummary = function(nw, ...) {\n    topn = 3;\n    #cat(\"\\nProperties of the Network:\\n\");\n    print(nw$graph);\n    cat(paste0(\"Density = \", nw$props$density, \"\\n\"));\n    #plot(nw$props$degDist);\n        \n    setkey(nw$nodeProps, degree);\n    cat(paste0(\"\\nTop \", topn, \" nodes based on Degree:\\n\"));\n    print(tail(nw$nodeProps[,list(node, degree)], topn));\n    \n    setkey(nw$nodeProps, betweeness);\n    cat(paste0(\"\\nTop \", topn, \" nodes based on betweeness:\\n\"));\n    print(tail(nw$nodeProps[,list(node, betweeness)], topn));\n    \n    setkey(nw$nodeProps, closeness);\n    cat(paste0(\"\\nTop \", topn, \" nodes based on closeness:\\n\"));\n    print(tail(nw$nodeProps[, list(node, closeness)], topn));\n    \n    invisible(nw);\n}\n\n# c = edge.betweenness.community(g$graph)\n\n# Usage as application\n# --------------------\n# dataFile = \"D:/WorkSpace/R/SNA/data/samplecdrs.csv\"\n#\n# source(\"D:/WorkSpace/R/SNA/src/network-analysis.R\")\n# g = computeNWProp(loadData(dataFile), quote(call_type == 3))\n# plotGraph(g$graph)\n# writeGraph(g$graph, getOutputFile(dataFile))\n",
    "created" : 1411361894947.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1068604",
    "id" : "72E844A3",
    "lastKnownWriteTime" : 1412678672,
    "path" : "D:/WorkSpace/R/SNA/src/network-analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}